version: '3.8'

services:
  # PostgreSQL database with pgvector extension
  db:
    image: pgvector/pgvector:pg16
    container_name: lightrag-db
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-lightrag}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d
    networks:
      - lightrag-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: lightrag-redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - lightrag-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Main application
  app:
    build: .
    container_name: lightrag-app
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      # Database configuration
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@db:5432/${POSTGRES_DB:-lightrag}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-lightrag}
      
      # Redis configuration
      REDIS_URL: redis://redis:6379
      
      # API Keys (must be provided via .env file)
      OPENROUTER_API_KEY: ${OPENROUTER_API_KEY}
      GOOGLE_API_KEY: ${GOOGLE_API_KEY}
      LOGFIRE_TOKEN: ${LOGFIRE_TOKEN}
      
      # OpenAI Configuration for PydanticAI
      OPENAI_API_KEY: ${OPENROUTER_API_KEY}
      OPENAI_BASE_URL: ${OPENAI_BASE_URL:-https://openrouter.ai/api/v1}
      
      # Firebase Configuration
      FIREBASE_API_KEY: ${FIREBASE_API_KEY}
      FIREBASE_AUTH_DOMAIN: ${FIREBASE_AUTH_DOMAIN}
      FIREBASE_PROJECT_ID: ${FIREBASE_PROJECT_ID}
      FIREBASE_STORAGE_BUCKET: ${FIREBASE_STORAGE_BUCKET}
      FIREBASE_MESSAGING_SENDER_ID: ${FIREBASE_MESSAGING_SENDER_ID}
      FIREBASE_APP_ID: ${FIREBASE_APP_ID}
      FIREBASE_MEASUREMENT_ID: ${FIREBASE_MEASUREMENT_ID}
      FIREBASE_PRIVATE_KEY_ID: ${FIREBASE_PRIVATE_KEY_ID}
      FIREBASE_PRIVATE_KEY: ${FIREBASE_PRIVATE_KEY}
      FIREBASE_CLIENT_EMAIL: ${FIREBASE_CLIENT_EMAIL}
      FIREBASE_CLIENT_ID: ${FIREBASE_CLIENT_ID}
      FIREBASE_AUTH_URI: ${FIREBASE_AUTH_URI}
      FIREBASE_TOKEN_URI: ${FIREBASE_TOKEN_URI}
      
      # Application Configuration
      DEBUG: ${DEBUG:-false}
      SECRET_KEY: ${SECRET_KEY:-your-secret-key-change-this-in-production}
      ALLOWED_HOSTS: ${ALLOWED_HOSTS:-localhost,127.0.0.1,lightrag-app}
      
      # Model Configuration
      DEFAULT_MODEL: ${DEFAULT_MODEL:-claude-3.5-sonnet}
      EMBEDDING_MODEL: ${EMBEDDING_MODEL:-gemini-embedding-001}
      
      # File Upload Configuration
      MAX_FILE_SIZE: ${MAX_FILE_SIZE:-5242880}
      UPLOAD_PATH: ${UPLOAD_PATH:-/app/uploads}
      
      # Logging Configuration
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      LOG_FILE: ${LOG_FILE:-/app/logs/app.log}
      
    ports:
      - "${APP_PORT:-8000}:8000"
    volumes:
      - uploads_data:/app/uploads
      - logs_data:/app/logs
    networks:
      - lightrag-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Database migration service (runs once on startup)
  migrate:
    build: .
    container_name: lightrag-migrate
    depends_on:
      db:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@db:5432/${POSTGRES_DB:-lightrag}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-lightrag}
    command: ["python", "scripts/setup_db.py"]
    networks:
      - lightrag-network
    restart: "no"

# Named volumes for data persistence
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  uploads_data:
    driver: local
  logs_data:
    driver: local

# Network for service communication
networks:
  lightrag-network:
    driver: bridge
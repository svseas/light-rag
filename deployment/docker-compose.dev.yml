version: '3.8'

services:
  # Extend base services
  db:
    extends:
      file: docker-compose.yml
      service: db
    ports:
      - "5432:5432"  # Expose for local development

  redis:
    extends:
      file: docker-compose.yml
      service: redis
    ports:
      - "6379:6379"  # Expose for local development

  # Development version of the app with hot reloading
  app:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: lightrag-app-dev
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      # Database configuration
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@db:5432/${POSTGRES_DB:-lightrag}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-lightrag}
      
      # Redis configuration
      REDIS_URL: redis://redis:6379
      
      # API Keys
      OPENROUTER_API_KEY: ${OPENROUTER_API_KEY}
      GOOGLE_API_KEY: ${GOOGLE_API_KEY}
      LOGFIRE_TOKEN: ${LOGFIRE_TOKEN}
      
      # OpenAI Configuration
      OPENAI_API_KEY: ${OPENROUTER_API_KEY}
      OPENAI_BASE_URL: ${OPENAI_BASE_URL:-https://openrouter.ai/api/v1}
      
      # Firebase Configuration
      FIREBASE_API_KEY: ${FIREBASE_API_KEY}
      FIREBASE_AUTH_DOMAIN: ${FIREBASE_AUTH_DOMAIN}
      FIREBASE_PROJECT_ID: ${FIREBASE_PROJECT_ID}
      FIREBASE_STORAGE_BUCKET: ${FIREBASE_STORAGE_BUCKET}
      FIREBASE_MESSAGING_SENDER_ID: ${FIREBASE_MESSAGING_SENDER_ID}
      FIREBASE_APP_ID: ${FIREBASE_APP_ID}
      FIREBASE_MEASUREMENT_ID: ${FIREBASE_MEASUREMENT_ID}
      FIREBASE_PRIVATE_KEY_ID: ${FIREBASE_PRIVATE_KEY_ID}
      FIREBASE_PRIVATE_KEY: ${FIREBASE_PRIVATE_KEY}
      FIREBASE_CLIENT_EMAIL: ${FIREBASE_CLIENT_EMAIL}
      FIREBASE_CLIENT_ID: ${FIREBASE_CLIENT_ID}
      FIREBASE_AUTH_URI: ${FIREBASE_AUTH_URI}
      FIREBASE_TOKEN_URI: ${FIREBASE_TOKEN_URI}
      
      # Development settings
      DEBUG: true
      SECRET_KEY: ${SECRET_KEY:-dev-secret-key-not-for-production}
      ALLOWED_HOSTS: ${ALLOWED_HOSTS:-localhost,127.0.0.1,lightrag-app-dev}
      LOG_LEVEL: DEBUG
      
      # Model Configuration
      DEFAULT_MODEL: ${DEFAULT_MODEL:-claude-3.5-sonnet}
      EMBEDDING_MODEL: ${EMBEDDING_MODEL:-gemini-embedding-001}
      
    ports:
      - "${APP_PORT:-8000}:8000"
    volumes:
      # Mount source code for hot reloading
      - .:/app
      - /app/__pycache__  # Exclude pycache
      - dev_uploads:/app/uploads
      - dev_logs:/app/logs
    networks:
      - lightrag-network
    restart: unless-stopped
    command: ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]

  # pgAdmin for database management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: lightrag-pgadmin
    depends_on:
      - db
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@lightrag.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin}
      PGADMIN_LISTEN_PORT: 80
    ports:
      - "${PGADMIN_PORT:-8081}:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - lightrag-network
    restart: unless-stopped

  # Database migration service
  migrate:
    extends:
      file: docker-compose.yml
      service: migrate

# Development-specific volumes
volumes:
  dev_uploads:
    driver: local
  dev_logs:
    driver: local
  pgadmin_data:
    driver: local
  postgres_data:
    driver: local
  redis_data:
    driver: local

# Use the same network
networks:
  lightrag-network:
    driver: bridge